#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2133 0 17 3 31
(
 #";\345\257\271\346\212\275\350\261\241\346\225\260\346\215"
 #"\256\347\232\204\346\261\202\345\257\274\347\250\213\345\272\217"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"(define (deriv exp var)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"  (cond ((number? exp) 0)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"        ((variable? exp)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"         (if (same-variable? exp var) 1 0))"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"        ((sum? exp)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"         (make-sum (deriv (addend exp) var)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                   (deriv (augend exp) var)))"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"        ((p"
0 0 17 3 12 #"roduct? exp)"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"         (make-sum"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"          (make-product (multiplier exp)"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                        (deriv (multiplicand exp) var))"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"          (make-product (deriv (multiplier exp) var)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                        (multiplicand exp))))"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"        ((exponentiation? ex"
0 0 17 3 2 #"p)"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"         (make-product (make-product (exponent exp)"
0 0 17 29 1 #"\n"
0 0 17 3 91
(
 #"                                     (make-exponentiation (base exp)"
 #" (- (exponent exp) 1)))"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"                       (deriv (base exp) var)))"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"        (else"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"         (error \"unknown expression type -- DER"
0 0 17 3 11 #"IV\" exp))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(define (variable? x) (symbol? x))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"(define (same-variable? v1 v2)"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"  (and (variable? v1) (variable? v2) (eq? v1 v2)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"(define (make-sum a1 a2)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"  (cond ((=number? a1 0) a2)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"        ((=number? a2 0) a1)"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"        ((and (number? a1) (number? a2)) (+ a1 a2))"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"        (else (list '+ a1 a2))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define (=number? exp num)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  (and (number? exp) (= exp num)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"(define (make-product m1 m2)"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"  (cond ((or (=number? m1 0) (=number? m2 0)) 0)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"        ((=number? m1 1) m2)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"        ((=number? m2 1) m1)"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"        ((an"
0 0 17 3 39 #"d (number? m1) (number? m2)) (* m1 m2))"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"        (else (list '* m1 m2))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"(define (sum? x)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"  (and (pair? x) (eq? (car x) '+)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"(define (addend s) (cadr s))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(define (augend s) (caddr s))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"(define (product? x)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"  (and (pair? x) (eq? (car x) '*)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"(define (multiplier p) (cadr p))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"(define (multiplicand p) (caddr p))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.56"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(define (exponentiation? exp)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"  (and (pair? exp) (eq? (car exp) '**)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(define (make-exponentiation base exp)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"  (cond ((=number? base 0) 0)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"        ((or (=number? base 1)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 3 32 #"            (=number? exp 0)) 1)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"        ((=number? exp 1) base)"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"        (else"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"         (list '** base exp))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(define (exponent exp)"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"  (caddr exp))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(define (base exp)"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"  (cadr exp))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #";(deriv '(* x (** x 7)) 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22
(
 #";\346\214\207\346\225\260\345\277\205\351"
 #"\241\273\346\230\257\345\256\236\345\200\274"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.57"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"(define (addend s) (cadr s))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(define (augend s)"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"  (if (and (or (sum? s) (product? s))"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"           (null? (cdddr s)))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"      (caddr s)"
0 0 17 29 1 #"\n"
0 0 17 3 47
(
 #"      ;\346\230\257\344"
 #"\272\214\345\205\203\345\275\242\345"
 #"\217\202\345\274\217,\351\200\211\345\217\226\347"
 #"\254\254\344\272\214\344\270\252\345\217\202\346\225\260"
) 0 0 17 29 1 #"\n"
0 0 17 3 26 #"      (cons '+ (cddr s))))"
0 0 17 29 1 #"\n"
0 0 17 3 86
(
 #"      ;\345\217\202\346\225"
 #"\260\350\266\205\350\277\207\344\272\214\345\205"
 #"\203,\351\200\211\345\217\226\347\254\254\344"
 #"\270\200\344\270\252\345\217\202\346\225\260\344"
 #"\273\245\345\244\226\347\232\204\345"
 #"\217\202\346\225\260\347\273\204\346\210\220\344\270\200"
 #"\344\270\252\345\274\217\345\255\220\350\277\224\345\233\236"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"(define (multiplier p) (cadr p))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(define (multiplicand"
0 0 17 3 3 #" p)"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"  (if (and (or (sum? p) (product? p))"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"           (null? (cdddr p)))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"      (caddr p)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"      (cons '* (cddr p))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #";(deriv '(* x (* y (+ x 3))) 'x)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #";(deriv '(* (* x y) (+ x 3)) 'x)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 21 #";'(* x (* y (+ x 3)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(define t '(* x (+ y y) y))"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"(define d '(* (* x y"
0 0 17 3 11 #") (+ x 3)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"d"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(cdr d)"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"(cddr d)"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(cdddr d)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #";(cdddr t)"
0 0 17 29 1 #"\n"
0 0 17 3 18 #";(null? (caddr d))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 13 #";(deriv t 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 49
(
 #";\351\234\200\350\246\201\345\244\204\347\220"
 #"\206\345\217\252\346\234\211\344\270"
 #"\200\344\270\252\347\256\227\345\274\217\346\227\266\345"
 #"\217\221\347\224\237\347\232\204\351\227\256\351\242\230"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22 #";(deriv '(* x y y) 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #";(y (+ x 3)) -> (* y (+ x 3))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 41 #";(cons '* '(y (+ x 3))) == '(* y (+ x 3))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(deriv '(* x y (+ x 3)) 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(deriv "
0 0 17 3 24 #"'(* (* x y) (+ x 3)) 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"\346\210\220\345\212\237!!!"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.58"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 4 #"sum?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"make-sum"
0 0 24 3 2 #" ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"product?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"make-sum"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"make-product"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"make-product"
0 0 24 3 2 #" ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 12 #"multiplicand"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 15 #"exponentiation?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"make-product"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 24 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 19 #"make-exponentiation"
0 0 24 3 2 #" ("
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 11 #"infix-deriv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"unknown expression type -- DERIV\""
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";a)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";\345\212\240\346\263\225"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sum?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(define (augend e)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (caddr e))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-sum"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 2 #"a2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 2 #"a1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";\344\271\230\346\263\225"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"product?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(define (multiplicand e)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (caddr e))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"m1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";\346\214\207\346\225\260"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"exponentiation?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"**"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"base"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"**"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(infix-deriv '((x + y) * (x + y)) 'x)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(infix-deriv '(x * (x + y)) 'x)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";b)"
0 0 24 29 1 #"\n"
0 0 17 3 61
(
 #";\345\217\257\350\203\275\346\226\271\346\241"
 #"\210\357\274\232\345\212\240\346\263\225\346\227"
 #"\266\350\277\233\345\205\245\351\200"
 #"\222\345\275\222\357\274\214\344\271\230\346\263\225\346"
 #"\227\266\350\277\233\350\241\214\346\261\202\345\257\274"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define t '(x + 3 * x))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define exp '(x + 3 * (x + y + 2 + x)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(infix-deriv exp 'x)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";exp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(augend t)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31
(
 #";\345\260\232\346\234\211\351\227\256\351\242\230\357\274"
 #"\214\344\273\212\345\244\251\345\205\210\344\274\221\346\201\257"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26
(
 #";;\345\256\236\344\276\213\357\274\232\351\233"
 #"\206\345\220\210\347\232\204\350\241\250\347\244\272"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(define (element-of-set? x set)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"  (cond ((null? set) false)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"        ((equal? x (car set)) true)"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"        (else (element-of-set? x (cdr set)))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define (adjoin-set x set)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"  (if (element-of-set? x set)"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"      set"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"      (cons x set)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"(define (i"
0 0 17 3 26 #"ntersection-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (cond ((or (null? set1) (null? set2)) '())"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"        ((element-of-set? (car set1) set)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"         (cons (car set1)"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"               (intersection-set (cdr set1) set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"        (else (intersection-set (cdr set1) set2))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.59"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"(d"
0 0 17 3 27 #"efine (union-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"  (cond ((or (null? set1) (null? set2)) set2)"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"        ((not (element-of-set? (car set1) set2))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"         (cons (car set1)"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"               (union-set (cdr set1) set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"        (else (union-set (cdr set1) set2))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define t1 '(2 3 4 5 1 9))"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define t2 '(6 7 8 9 2 3))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.60"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define (adjoin-set x set)"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"  (cons x set))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"(define (intersection-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (cond ((or (null? set1) (null? set2)) '())"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"        ((element-of-set? (car set1) set2)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"         (cons (car set1)"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 17 3 45 #"         (intersection-set (cdr set1) set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"        (else (intersection (cdr set1) set2))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(define (union-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"  (if (or (null? set1) (null? set2))"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"      set2"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"      (cons (car set1) (union-set (cdr set1) set2))))"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"(union-set t1 t2)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 31
(
 #";\346\230\276\347\204\266\350\277\231\351\207\214\346\225"
 #"\210\347\216\207\346\230\257\346\233\264\351\253\230\347\232\204"
) 0 0 24 29 1 #"\n"
0 0 17 3 37
(
 #";\346\262\241\346\234\211\350\277"
 #"\207\345\244\232\351\207\215\345\244\215\345\205\203\347"
 #"\264\240\347\232\204\351\233\206\345\220\210\344\270\255"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26
(
 #";;\351\233\206\345\220\210\344\275\234\344\270"
 #"\272\346\216\222\345\272\217\347\232\204\350\241\250"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(define (element-of-set? x set)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"  (cond ((null? set) false)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"        ((= x (car set)) true)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"        ((< x (car set)) false)"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"        (else (element-of-set? x (cdr set)))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"(define (intersection-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"  (if (or (nul"
0 0 17 3 22 #"l? set1) (null? set2))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"      '()"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"      (let ((x1 (car set1)) (x2 (car set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"        (cond ((= x1 x2)"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"               (cons x1"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"                     (intersection-set (cdr set1)"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                                       (cdr set2))))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"              ((< x1 x2)"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"               (intersection-set (cdr set1) set2))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"              ((< x2 x1)"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"               (intersection-set set1 (cdr set2)))))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.61"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define (adjoin-set x set)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"  (let ((y (car set)))"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"    (cond ((null? (cdr set)) (list y x))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"          ((= x y) set)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 3 31 #"         ((< x y) (cons x set))"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"          (else (cons y (adjoin-set x (cdr set)))))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 33 #";(adjoin-set 10 (list 1 3 5 7 9))"
0 0 17 29 1 #"\n"
0 0 17 3 41
(
 #";\346\263\250\346\204\217\345\275\223x>y\346\227\266\350\246\201\345"
 #"\205\210cons\344\271\213\345"
 #"\211\215\347\232\204\345\205\203\347\264\240"
) 0 0 17 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.62"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(define (union-set set1 set2)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"  (let ((x (car set1)) (y (car set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"    (cond ((null? (cdr set1)) set"
0 0 17 3 2 #"2)"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"           ((null? (cdr set2)) set1)"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"           ((< x y) (cons x (union-set (cdr set1) set2)))"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"           ((> x y) (cons y (union-set set1 (cdr set2))))"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"           (else (cons x (union-set (cdr set1) (cdr set2)))))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #";(union-set (list 1 2 3 5 7 8) (lis"
0 0 17 3 12 #"t 3 6 9 10))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #";\346\210\220\345\212\237"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23
(
 #";;\351\233\206\345\220\210\344\275\234"
 #"\344\270\272\344\272\214\345\217\211\346\240\221"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"adjoin-set"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #")) "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-tree"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"adjoin-set"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-tree"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"adjoin-set"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.63"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tree->list-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tree->list-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"tree->list-1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tree->list-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"copy-to-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 11 #"result-list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"copy-to-list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"copy-to-list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 11 #"result-list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"copy-to-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";a)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 17 3 11 #";3 9 1 5 11"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"t3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(tree->list-2 t1)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(tree->list-2 t2)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(tree->list-2 t3)"
0 0 24 29 1 #"\n"
0 0 17 3 52
(
 #";\346\230\257\357\274\214\350\277\231\344\270"
 #"\244\344\270\252\350\277\207\347\250\213"
 #"\345\260\206\344\270\200\346\243\265\346\240\221\350\275\254"
 #"\346\215\242\344\270\272\351\241\272\345\272\217\350\241\250"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #";b)"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";\344\270\215\344\270\200\346\240\267\357\274"
 #"\214\350\213\245\350\241\250\344\270\216\346\240"
 #"\221\346\234\211\347\233\270\345\220\214"
 #"\347\232\204\347\273\223\347\202\271\346\225\260\357\274\214\345"
 #"\210\231\350\241\250\346\233\264\346\205\242\344\270\200\344\272\233"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.64"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tree"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"partial-tree"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"partial-tree"
0 0 24 3 1 #" "
0 0 14 3 4 #"elts"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 4 #"elts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"left-size"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"left-result"
0 0 24 3 2 #" ("
0 0 14 3 12 #"partial-tree"
0 0 24 3 1 #" "
0 0 14 3 4 #"elts"
0 0 24 3 1 #" "
0 0 14 3 9 #"left-size"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"left-tree"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"left-result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"non-left-elts"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"left-result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"right-size"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"left-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"this-entry"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"non-left-elts"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"right-result"
0 0 24 3 2 #" ("
0 0 14 3 12 #"partial-tree"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"non-left-elts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                              "
0 0 14 3 10 #"right-size"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"right-tree"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"right-result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"remaining-elts"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"right-result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-tree"
0 0 24 3 1 #" "
0 0 14 3 10 #"this-entry"
0 0 24 3 1 #" "
0 0 14 3 9 #"left-tree"
0 0 24 3 1 #" "
0 0 14 3 10 #"right-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 14 #"remaining-elts"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28
(
 #";\346\236\201\345\205\266\346\201\220\346\200\226\347"
 #"\232\204\351\200\222\345\275\222\350\277\207\347\250\213"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(list-tree p)"
0 0 24 29 1 #"\n"
0 0 17 3 52
(
 #";\350\277\231\344\270\252\350\277\207\347\250"
 #"\213\344\277\235\350\257\201\350\275\254"
 #"\346\215\242\345\220\216\347\232\204\346\240\221\346\230\257"
 #"\345\271\263\350\241\241\344\272\214\345\217\211\346\240\221"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";\345\271\263\350\241\241\344\272\214\345\217"
 #"\211\346\240\221\357\274\232\357\274\210\345\267"
 #"\246\346\210\226\345\217\263\357\274\211\345\255"
 #"\220\346\240\221\347\232\204\347\273\223"
 #"\347\202\271\346\240\221\345\244\247\347\272\246\346\230\257"
 #"\347\210\266\346\240\221\347\232\204\344\270\200\345\215\212"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(list-tree (list 1 3 5 7 9 11))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(list-tree (list 2 4 5 6 7))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(list-tree (list 1 2 3 4 5 6 7 9 11))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";a)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 45
(
 #"\345\260\206\350\241\250\345\210\222\345\210"
 #"\206\344\270\272\345\267\246\343\200\201\344\270\255\343\200\201\345"
 #"\217\263\344\270\211\344\270\252\351\203\250\345\210\206\357\274\214"
) 0 0 17 29 1 #"\n"
0 0 17 3 51
(
 #"\347\204\266\345\220\216\351\200\222\345\275\222"
 #"\345\234\260\345\234\250\345\267\246"
 #"\343\200\201\345\217\263\350\241\250\344\270\255\350\277\233"
 #"\350\241\214\344\270\212\350\277\260\350\277\207\347\250\213"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(list-tree (list 1 3 5 7 9 11))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";b)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";\316\230(n)"
0 0 24 29 1 #"\n"
0 0 17 3 46
(
 #";\344\273\245partial-tree\346\211\247\350\241\214\347"
 #"\232\204\346\254\241\346\225\260\346\235\245"
 #"\350\256\241\347\256\227\346\255\245\346\225\260"
) 0 0 24 29 1 #"\n"
0 0 17 3 51
(
 #";\345\217\257\344\273\245\347\241\256\345\256"
 #"\232\357\274\232\346\255\245\346\225\260 = 2*n + "
 #"1\357\274\214\345\275\223n\344\270"
 #"\272\345\245\207\346\225\260\346\227\266"
) 0 0 24 29 1 #"\n"
0 0 17 3 25
#";\350\247\201\350\247\243\346\236\220\345\233\276partial-tree"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\347\273\203\344\271\2402.65"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (union-set tree1 tree2))"
0 0 24 29 1 #"\n"
0 0 17 3 31
(
 #";\351\200\222\345\275\222\345\234\260\357\274\214\344\273"
 #"\216\345\255\220\346\240\221\345\210\260\347\210\266\346\240\221"
) 0 0 24 29 1 #"\n"
0 0 17 3 28
(
 #";\350\277\207\347\250\213\347\232\204\350\241\214\344"
 #"\270\272\346\230\257\344\273\200\344\271\210\357\274\237"
) 0 0 24 29 1 #"\n"
0 0 17 3 37
(
 #";\347\262\230\345\220\210\347\232"
 #"\204\346\227\266\345\200\231\350\246\201\350\200\203\350"
 #"\231\221\347\273\223\347\202\271\346\225\260\351\207\217"
) 0 0 24 29 1 #"\n"
0 0 17 3 46
(
 #";\346\257\217\344\270\200\345\261\202\346"
 #"\240\210\351\203\275\346\234\211\345\267\246\343\200\201\344\270\255"
 #"\343\200\201\345\217\263\344\270\211"
 #"\344\270\252\351\203\250\345\210\206"
) 0 0 24 29 1 #"\n"
0 0 17 3 40
(
 #";\345\217\257\344\273\245\346\212\212"
 #"\344\270\200\344\270\252\345\255\220\346\240\221\347\234\213"
 #"\346\210\220\344\270\200\344\270\252\346\225\264\344\275\223"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"union-set"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 10 #"union-list"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 1 #" "
0 0 17 3 4 #"set2"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 4 #")) ("
0 0 17 3 1 #"y"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 4 #"set2"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" (("
0 0 17 3 5 #"null?"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 3 #")) "
0 0 17 3 4 #"set2"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"           (("
0 0 17 3 5 #"null?"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set2"
0 0 17 3 3 #")) "
0 0 17 3 4 #"set1"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"           (("
0 0 17 3 1 #"<"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 10 #"union-list"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 2 #") "
0 0 17 3 4 #"set2"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"           (("
0 0 17 3 1 #">"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 2 #" ("
0 0 17 3 10 #"union-list"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set2"
0 0 17 3 4 #"))))"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"           ("
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 10 #"union-list"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set1"
0 0 17 3 3 #") ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"set2"
0 0 17 3 7 #")))))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 9 #"union-set"
0 0 17 3 1 #" "
0 0 17 3 5 #"tree1"
0 0 17 3 1 #" "
0 0 17 3 5 #"tree2"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 5 #"list1"
0 0 17 3 2 #" ("
0 0 17 3 12 #"tree->list-1"
0 0 17 3 1 #" "
0 0 17 3 5 #"tree1"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"        ("
0 0 17 3 5 #"list2"
0 0 17 3 2 #" ("
0 0 17 3 12 #"tree->list-1"
0 0 17 3 1 #" "
0 0 17 3 5 #"tree2"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"    ("
0 0 17 3 9 #"list-tree"
0 0 17 3 2 #" ("
0 0 17 3 10 #"union-list"
0 0 17 3 1 #" "
0 0 17 3 5 #"list1"
0 0 17 3 1 #" "
0 0 17 3 5 #"list2"
0 0 17 3 4 #"))))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(union-set"
0 0 17 3 1 #" "
0 0 17 3 2 #"t2"
0 0 17 3 4 #" t3)"
0 0 24 29 1 #"\n"
0 0 17 3 54
(
 #";\350\277\231\346\240\267\345\201\232\345\275"
 #"\223\347\204\266\350\203\275\350\241\214"
 #"\357\274\214\344\275\206\345\244\215\346\235\202\345\272\246\346"
 #"\230\257\344\270\215\346\230\257\316\230(n)\357\274\237"
) 0 0 24 29 1 #"\n"
0 0 17 3 34
(
 #";\350\200\214\344\270\224\346\230\276\345\276\227\345\244\252\346"
 #"\262\241\346\212\200\346\234\257\345\220\253\351\207\217\344\272\206"
) 0 0 24 29 1 #"\n"
0           0
